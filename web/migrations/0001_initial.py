# Generated by Django 4.0.8 on 2022-12-19 20:47

import django.db.models.deletion
from django.db import migrations, models

import web.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="Class",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=127, unique=True)),
                ("latin_title", models.CharField(max_length=127, unique=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Family",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=127, unique=True)),
                ("latin_title", models.CharField(max_length=127, unique=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Genus",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=127, unique=True)),
                ("latin_title", models.CharField(max_length=127, unique=True)),
                ("family", models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="web.family")),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Organization",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("name", models.CharField(max_length=127)),
                ("address", models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name="Phylum",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=127, unique=True)),
                ("latin_title", models.CharField(max_length=127, unique=True)),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Plant",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("number", models.IntegerField()),
                ("latin_name", models.CharField(max_length=127)),
                ("name", models.CharField(max_length=127)),
                ("genus", models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="web.genus")),
                (
                    "organization",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="web.organization"),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Order",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("title", models.CharField(max_length=127, unique=True)),
                ("latin_title", models.CharField(max_length=127, unique=True)),
                (
                    "class_name",
                    models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="web.class"),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.AddField(
            model_name="family",
            name="order",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="web.order"),
        ),
        migrations.AddField(
            model_name="class",
            name="phylum",
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to="web.phylum"),
        ),
        migrations.CreateModel(
            name="Staff",
            fields=[
                ("id", models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name="ID")),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("name", models.CharField(max_length=127)),
                ("surname", models.CharField(max_length=127)),
                ("email", models.EmailField(max_length=320, unique=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                ("organization", models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to="web.organization")),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
            managers=[
                ("objects", web.models.UserManager()),
            ],
        ),
    ]
