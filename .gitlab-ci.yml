stages:
  - deploy

deploy_cloud:
  image: atnartur/yc:latest
  stage: deploy
  script:
    # устанавливаем ключ сервисного аккаунта
    - yc config set service-account-key $(echo $YANDEX_CLOUD_KEY)
    # устанавливаем ID каталога
    - yc config set folder-id $YANDEX_CLOUD_FOLDER_ID
    # настраиваем подключение к Yandex Cloud Registry
    - yc container registry configure-docker
    # собираем образ
    # (поменяйте путь до докерфайла после флага -f, если это необходимо)
    - docker build -t $YANDEX_CLOUD_REGISTRY/app:latest -f deploy/app/Dockerfile .
    # отправляем образ в registry
    - docker push $YANDEX_CLOUD_REGISTRY/app:latest
    # вытаскиваем service account id из ключа
    - export SERVICE_ACCOUNT_ID=$(yc config get service-account-key | grep service_account_id | awk '{print $2}')
    # запускаем миграции, чтобы не запускать их при старте контейнера
    - >
      docker run --rm 
      --env DB_NAME=$DB_NAME
      --env DB_USER=$DB_USER
      --env DB_HOST=$DB_HOST
      --env DB_PASSWORD=$DB_PASSWORD
      --env DB_PORT=$DB_PORT
      $YANDEX_CLOUD_REGISTRY/app:latest 
      python manage.py migrate
    # обновляем контейнер и прокидываем переменные окружения с параметрами подключения к БД
    # (они должны быть также установлены в Gitlab CI Variables)
    - >
        yc serverless container revision deploy 
        --image $YANDEX_CLOUD_REGISTRY/app:latest 
        --container-name $YANDEX_CONTAINER_NAME
        --service-account-id $SERVICE_ACCOUNT_ID
        --core-fraction 5
        --execution-timeout 30s
        --environment DB_NAME=$DB_NAME
        --environment DB_USER=$DB_USER
        --environment DB_HOST=$DB_HOST
        --environment DB_PASSWORD=$DB_PASSWORD
        --environment DB_PORT=$DB_PORT
        --environment AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
        --environment AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
        --environment AWS_DEFAULT_REGION="ru-central1"
        --environment CELERY_BROKER_URL=sqs://message-queue.api.cloud.yandex.net:443
        --environment CELERY_BROKER_IS_SECURE=True
        --environment CELERY_YANDEX_SERVERLESS_KEY=$CELERY_YANDEX_SERVERLESS_KEY
        --environment EMAIL_HOST=$EMAIL_HOST
        --environment EMAIL_HOST_USER=$EMAIL_HOST_USER
        --environment EMAIL_HOST_PASSWORD=$EMAIL_HOST_PASSWORD
        --environment EMAIL_PORT=$EMAIL_PORT
        --environment DEBUG=False
        --environment SENTRY_DSN=$SENTRY_DSN
        > /dev/null
    - yc serverless trigger delete --name celery > /dev/null || echo
    - >
        yc serverless trigger create message-queue
        --name celery
        --queue $YANDEX_MESSAGE_QUEUE_ARN
        --queue-service-account-id $SERVICE_ACCOUNT_ID
        --invoke-container-name $YANDEX_CONTAINER_NAME
        --invoke-container-service-account-id $SERVICE_ACCOUNT_ID
        --invoke-container-path /worker/$CELERY_YANDEX_SERVERLESS_KEY/
        --batch-size 1
        --batch-cutoff 10s
        > /dev/null
    # если в приложении есть еще какие-нибудь переменные окружения, прокиньте их здесь
  tags:
    # тег раннера, где будут запускаться сборки
    # (обычно менять не нужно, но если что, он находится здесь)
    - unienv_shared